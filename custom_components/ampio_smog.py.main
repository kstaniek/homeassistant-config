"""
Ampio Smog Sensor.

For more details about this component, please refer to the documentation at
https://home-assistant.io/components/ampio_smog
"""

import asyncio
import aiohttp
import logging
import async_timeout
import re
import socket

import voluptuous as vol
import homeassistant.helpers.config_validation as cv
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from homeassistant.helpers import discovery
from homeassistant.helpers.event import async_track_utc_time_change, async_call_later
from homeassistant.const import (CONF_HOST, CONF_SCAN_INTERVAL, CONF_NAME)

_LOGGER = logging.getLogger(__name__)

DOMAIN = 'ampio_smog'

CONF_SENSORS = 'sensors'

TIMEOUT = 10

SENSOR_CONFIG_SCHEMA = vol.Schema([{
    vol.Required(CONF_HOST): cv.string,
    vol.Optional(CONF_NAME, default='ampio_smog'): cv.string
}])

CONFIG_SCHEMA = vol.Schema({
    DOMAIN: vol.Schema({
        vol.Optional(CONF_SENSORS): SENSOR_CONFIG_SCHEMA,

    })
}, extra=vol.ALLOW_EXTRA)


class SensorLocalClient(object):
    """Ampio Smog Sensor Client."""

    def __init__(self, hass, sensor_ip, session=None, timeout=aiohttp.client.DEFAULT_TIMEOUT):
        """Initialize Sensor Client."""

        self.hass = hass
        self.timeout = timeout
        self.api_url = f'http://{sensor_ip}/data'
        self.data = None
        if session is not None:
            self.session = session
        else:
            self.session = aiohttp.ClientSession()

    async def fetch(self, *_):
        """Fetch the current data from the sensor device."""
        def try_again(err: str):
            _LOGGER.error("Retrying in 30s: {}".format(err))
            async_call_later(self.hass, 30, self.fetch)

        try:
            websession = async_get_clientsession(self.hass)
            with async_timeout.timeout(self.timeout, loop=self.hass.loop):
                resp = await websession.get(self.api_url)

            if resp.status != 200:
                try_again("{} returned {}".format(resp.url, resp.status))
                return
            data = await resp.text()
        except (asyncio.TimeoutError, aiohttp.ClientError) as err:
            try_again(err)
            return

        data_dict = {key: int(value) for key, value in
                     dict(re.findall(r'(\S+)=(\d+)', data)).items()}
        try:
            data_dict['Humidity'] = int(data_dict['Humidity'] / 1000)
            data_dict['Pressure'] = int(data_dict['Pressure'] / 100)
        except KeyError:
            pass

        return data_dict


def setup(hass, config):
    """Setup the ampio_smog platfor."""
    conf = config.get(DOMAIN)
    if conf is None:
        conf = {}

    if DOMAIN not in hass.data:
        hass.data[DOMAIN] = {}

    if CONF_SENSORS in conf:
        sensors = conf[CONF_SENSORS]
    else:
        sensors = []

    for sensor in sensors:
        host = sensor.get(CONF_HOST)
        name = sensor.get(CONF_NAME)
        if host is None:
            _LOGGER.error("No sensors found in the configuration")
            return False

        setup_sensor_deivce(host, name, hass)

    return True


def setup_sensor_deivce(host, name, hass):
    """Setup sensor device."""
    # check if not already added.
    if socket.gethostbyname(host) in hass.data[DOMAIN]:
        return

    sensor = AmpioSmogSensorDevice(host, name, hass)
    sensor.setup()


class AmpioSmogSensorDevice(object):
    """Manage single Ampio Smog Sensor device."""

    def __init__(self, host, name, hass):
        """Initialize the Smog Sensor Device."""
        self.host = host
        self.name = name
        self.device_id = socket.gethostbyname(host)
        self.hass = hass

        self.device = None
        self.data = None
        self.sensors = []

        hass.data[DOMAIN][self.device_id] = self

    def setup(self):
        """Setup the Smog Sensor Device."""
        self.device = SensorLocalClient(
            hass=self.hass,
            sensor_ip=self.host,
            session=async_get_clientsession(self.hass),
            timeout=TIMEOUT)

        async_call_later(self.hass, 1, self.update)
        async_track_utc_time_change(self.hass, self.update, second=0)

        discovery.load_platform(
            self.hass, 'sensor', DOMAIN,
            {'device_id': self.device_id}
        )

    async def update(self, *_):
        """Get the latest data from device and update sensor entities."""
        data = await self.device.fetch()
        if data is None:
            _LOGGER.warning("No data received")
            return
        self.data = data
        for sensor in self.sensors:
            await sensor.async_update_ha_state()

    def get_data(self, name):
        """Get the data value."""
        if self.data:
            return self.data.get(name)
        else:
            return None
