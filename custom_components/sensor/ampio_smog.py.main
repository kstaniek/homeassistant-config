
import logging

from homeassistant.helpers.entity import Entity
from homeassistant.const import ATTR_ATTRIBUTION

import custom_components.ampio_smog as smog

_LOGGER = logging.getLogger(__name__)


SENSOR_TYPES = {
    'Pressure': ['Pressure', 'hPa'],
    'Humidity': ['Humidity', '%'],
    "PM1": ["PM1", "µg/m³"],
    "PM2.5": ["PM2.5", "µg/m³"],
    "PM10": ["PM10", "µg/m³"],

}


CONF_ATTRIBUTION = "Air quality conditions from Ampio Smog Sensor."


def setup_platform(hass, config, add_devices, discovery_info=None):
    """Setup Ampio Smog Sensors."""
    if discovery_info is None or 'device_id' not in discovery_info:
        return

    device_id = discovery_info['device_id']
    device = hass.data[smog.DOMAIN][device_id]

    for attribute, details in SENSOR_TYPES.items():
        device.sensors.append(AmpioSmog(device, attribute, details[0], details[1]))

    add_devices(device.sensors, True)


class AmpioSmog(Entity):
    """Implementation of Ampio Smog Sensor."""

    def __init__(self, device, attribute, name, measurement):
        self._device = device
        self._attribute = attribute
        self._name = name
        self._measurement = measurement

    @property
    def name(self):
        """Return the name of the sensor."""
        return "_".join((self._device.name, self._name.lower()))

    @property
    def unique_id(self):
        """Return a unique ID."""
        return "_".join((self._device.device_id, self._name.lower()))

    @property
    def icon(self):
        """Return icon."""
        return 'mdi:earth'

    @property
    def state(self):
        return self._device.get_data(self._attribute)

    @property
    def should_poll(self):  # pylint: disable=no-self-use
        """No polling needed."""
        return False

    @property
    def unit_of_measurement(self):
        """Return the measurement unit."""
        return self._measurement

    @property
    def device_state_attributes(self):
        """Return the state attributes."""
        return {
            ATTR_ATTRIBUTION: CONF_ATTRIBUTION,
        }
